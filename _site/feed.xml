<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="4.1.1">Jekyll</generator><link href="http://localhost:4000/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/" rel="alternate" type="text/html" /><updated>2020-08-29T11:03:45+09:00</updated><id>http://localhost:4000/feed.xml</id><title type="html">Grey’s Devlog</title><subtitle>우직하게 기록하는 연습을 위한 블로그</subtitle><author><name>정겨운</name><email>gyuwoonj@gmail.com</email></author><entry><title type="html">프로그래밍 잘하고 싶다면 코드는 ‘이렇게’ 짜세요</title><link href="http://localhost:4000/devlog/programming-tips/" rel="alternate" type="text/html" title="프로그래밍 잘하고 싶다면 코드는 ‘이렇게’ 짜세요" /><published>2020-08-29T00:00:00+09:00</published><updated>2020-08-29T00:00:00+09:00</updated><id>http://localhost:4000/devlog/programming-tips</id><content type="html" xml:base="http://localhost:4000/devlog/programming-tips/">&lt;p&gt;출처 : &lt;a href=&quot;https://youtu.be/N7jcUb2T4RA&quot;&gt;삼평동연구소&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;1-프로그래밍-공부&quot;&gt;1. 프로그래밍 공부&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;좋은 코딩 습관을 갖추는 것에 집중하자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;주석이 아닌 코드로 설명되는 명확한 코드를 짜는 것을 목표로 한다.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;정확한 함수나 변수의 네이밍&lt;/li&gt;
  &lt;li&gt;명확한 인터페이스&lt;/li&gt;
  &lt;li&gt;불필요한 최적화 코드는 최대한 사용하지 말자
    &lt;ul&gt;
      &lt;li&gt;잘못 쓰면 오히려 &lt;strong&gt;가독성&lt;/strong&gt;이 떨어진다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;주석이 꼭 필요한 곳, 반드시 필요한 곳에 주석 달기 
⇒  나를 포함해 다른 사람이 이해하기 훨씬 수월함.
    &lt;ul&gt;
      &lt;li&gt;나 혼자 쓰는 것이 아닌 &lt;strong&gt;인터페이스에&lt;/strong&gt; 해당하는 &lt;strong&gt;함수&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;성능을 위해 최적화를 했지만 가독성이 떨어지는 &lt;strong&gt;함수&lt;/strong&gt;&lt;/li&gt;
      &lt;li&gt;&lt;strong&gt;장애&lt;/strong&gt;가 발생했었던 코드들 (히스토리가 있는 코드들)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예시)&lt;/p&gt;

&lt;h3 id=&quot;함수&quot;&gt;함수&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;함수가 명확한 기능을 하는가&lt;/li&gt;
  &lt;li&gt;함수에 전달되는 파라미터의 선택&lt;/li&gt;
  &lt;li&gt;파라미터의 올바른 IN/OUT 설정&lt;/li&gt;
  &lt;li&gt;함수의 명확한 return&lt;/li&gt;
  &lt;li&gt;함수가 적절한 기능 단위로 잘 분리되어 있는가 - open read write close&lt;/li&gt;
  &lt;li&gt;쌍이 맞는가 - 예) insert()가 있는데 delete()가 없을 경우&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;2-언어의-특징-알아두기&quot;&gt;2. 언어의 특징 알아두기&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;효율적 구현을 위해 언어의 특징을 알아두자&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;예)&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;“str1” == “str2”  vs  StringCompare(“str1”, “str2”)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;결과는 같다 ⇒ ‘&lt;strong&gt;차이점&lt;/strong&gt;은 뭘까?’ 생각하기 → 메모리 할당 / 성능 등&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;숫자 증감에서 i++ / ++i 의 차이를 알고서 사용하는가?&lt;/li&gt;
  &lt;li&gt;동적배열 → 초기에 기본 배열값은 얼마가 좋을까?&lt;/li&gt;
  &lt;li&gt;Hashtable, List, 동적배열, Map …&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;언어마다 내부적으로 구현된 알고리즘이 다를 수 있다. 그에 따라 성능도 달라지기 때문에 중급으로 레벨업 하기 위해서는 잘 알아두는게 중요하다!!&lt;/p&gt;

&lt;h2 id=&quot;추천팁&quot;&gt;추천팁!&lt;/h2&gt;
&lt;ol&gt;
  &lt;li&gt;책과 블로그 등에서 지식을 쌓아가자 : 이펙티브00같은 책 (이펙티브 자바..)&lt;/li&gt;
  &lt;li&gt;비슷한 기능을 하는 몇 가지가 있을 때 &lt;strong&gt;항상 의문을 갖고&lt;/strong&gt; 고민하자&lt;/li&gt;
  &lt;li&gt;언어에 추가되는 신기능을 알아두자 ⇒ 불필요한 코드량을 줄이는 등의 생산성 향상 기대&lt;/li&gt;
&lt;/ol&gt;</content><author><name>정겨운</name><email>gyuwoonj@gmail.com</email></author><category term="Devlog" /><category term="tip" /><summary type="html">초보개발자 개발 스킬업 1편</summary></entry><entry><title type="html">2020-08-27 일기</title><link href="http://localhost:4000/post-Diary/" rel="alternate" type="text/html" title="2020-08-27 일기" /><published>2020-08-27T00:00:00+09:00</published><updated>2020-08-27T00:00:00+09:00</updated><id>http://localhost:4000/post-Diary</id><content type="html" xml:base="http://localhost:4000/post-Diary/">&lt;h2 id=&quot;tdd&quot;&gt;TDD&lt;/h2&gt;

&lt;p&gt;언젠가 보겠지, 하는 마음으로 침대 옆에 늘 책을 두는 편이다.&lt;/p&gt;

&lt;p&gt;그런데 오늘따라 무슨 바람이 들었는지 TDD 책이 눈에 계속 밟히는 것이다(?!)&lt;/p&gt;

&lt;p&gt;그래, 오늘이 바로 그 언젠가구나 싶어서 읽기 시작했는데 생각보다 너무 재밌다.&lt;/p&gt;

&lt;p&gt;정보처리기사 자격증 따겠다고 무턱대고 외웠던 그 XP의 아버지 켄트 벡..&lt;/p&gt;

&lt;p&gt;그의 유머코드가 나랑 너무 잘 맞았다. (번역을 잘하신건가)&lt;/p&gt;

&lt;p&gt;읽을수록 마치 잘하는 사수가 옆에서 같이 프로그래밍하는 느낌이 들었다.&lt;/p&gt;

&lt;p&gt;정말 쉽게 숙숙 코드를 짜는데, 안다. 옆에서 볼 때 쉬워보이는게 진짜 고수라는 것,, 흑흑&lt;/p&gt;

&lt;p&gt;아무튼, 읽을수록 때로는 소름돋게 통쾌하고, 왜 이런 생각을 못했을까 좌절하면서 조금씩 아껴서 읽고 있다. 두고두고 읽고 싶다. 
&lt;br /&gt; &lt;br /&gt;
&lt;img src=&quot;http://localhost:4000/assets/images/2020-08-27/tdd.jpeg&quot; alt=&quot;tdd&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;br /&gt;&lt;/p&gt;
&lt;h2 id=&quot;회사&quot;&gt;회사&lt;/h2&gt;

&lt;p&gt;내가 가고싶은 회사는 어떤 회사인지 생각해 보았다.&lt;/p&gt;

&lt;p&gt;학원에 연계되어 연락 오는 회사들 중 정말 빡셀 것 같지만  성장할 것 같은 회사도 있고, 큰 문제를 일으키지 않는다면 짤리지 않고 편하게 다닐 수 있을 것 같은 회사도 있었다.&lt;/p&gt;

&lt;p&gt;물론 쌩 초보로서 가보지 못한 길에 대한 두려움이 크지만, 그래도 역시 빡세게 굴러서 빨리 성장하는 편이 더 좋다.&lt;/p&gt;

&lt;p&gt;그래. 전공자들이 몇 년동안 공부한 지식을 내가 어떻게 6개월도 안되는 시간을 공부하고서 똑같다고 할 수 있을까.&lt;/p&gt;

&lt;p&gt;더 치열하게 공부하자.&lt;/p&gt;</content><author><name>정겨운</name><email>gyuwoonj@gmail.com</email></author><summary type="html">TDD</summary></entry><entry><title type="html">[자료구조] List</title><link href="http://localhost:4000/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/list/" rel="alternate" type="text/html" title="[자료구조] List" /><published>2020-08-26T00:00:00+09:00</published><updated>2020-08-26T00:00:00+09:00</updated><id>http://localhost:4000/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/list</id><content type="html" xml:base="http://localhost:4000/%EC%9E%90%EB%A3%8C%EA%B5%AC%EC%A1%B0/list/">&lt;p&gt;&lt;a href=&quot;https://youtu.be/186Q7eippsI&quot;&gt;생활코딩 DataStructure 강의&lt;/a&gt; 정리&lt;/p&gt;

&lt;h1 id=&quot;list의-key-point&quot;&gt;List의 Key Point!!&lt;/h1&gt;

&lt;ol&gt;
  &lt;li&gt;순서가 있다&lt;/li&gt;
  &lt;li&gt;중복을 허용한다&lt;/li&gt;
&lt;/ol&gt;

&lt;h1 id=&quot;array와-list의-차이점&quot;&gt;Array와 List의 차이점&lt;/h1&gt;

&lt;h2 id=&quot;array&quot;&gt;Array&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;데이터의 저장 위치, 즉 &lt;strong&gt;Index&lt;/strong&gt;가 중요하다&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;list&quot;&gt;List&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;엘리먼트(데이터)의 &lt;strong&gt;순서&lt;/strong&gt;가 더 중요하다&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예) 데이터를 추가하는 경우 &lt;br /&gt;
&lt;img src=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/1335/2881.png&quot; alt=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/1335/2881.png&quot; /&gt; &lt;br /&gt;
이러한 데이터가 있을 때,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/1335/2882.png&quot; alt=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/1335/2882.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;배열의 경우 3번 인덱스에 데이터를 추가한다면 원본의 데이터를 &lt;strong&gt;덮어쓰게&lt;/strong&gt; 된다.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/1335/2883.png&quot; alt=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/1335/2883.png&quot; /&gt;&lt;/p&gt;
&lt;ul&gt;
  &lt;li&gt;리스트의 경우 &lt;strong&gt;기존 데이터를 한 칸 뒤로 밀고&lt;/strong&gt;(인덱스 3번의 값이 4번으로 이동), 빈공간에 데이터를 추가한다.(새로운 인덱스 3번이 됨)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;예) 데이터를 삭제하는 경우&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/1335/2879.png&quot; alt=&quot;배열데이터삭제&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;배열의 경우 데이터를 삭제할 시 비어있는 상태를 유지한다.
    &lt;ul&gt;
      &lt;li&gt;&lt;strong&gt;인덱스&lt;/strong&gt;가 변하지 않는다 ⇒ 인덱스는 값에 대한 유일무이한 식별자이다!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;리스트는 3번 데이터가 사라지면 4번 데이터가 앞으로 전진한다&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;list의-장점&quot;&gt;List의 장점&lt;/h1&gt;

&lt;h3 id=&quot;데이터가-연속적이다-즉-비어있는-데이터가-없다&quot;&gt;데이터가 연속적이다. 즉, 비어있는 데이터가 없다&lt;/h3&gt;

&lt;p&gt;⇒ for문 등을 통해 순회 처리를 하는 경우 데이터가 비어 있는지 체크할 필요가 없다!&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Array는 1.순회하는 과정에서 빈 공간을 체크해야 한다 &amp;amp;&amp;amp; 2.데이터를 삭제하는 경우 빈 공간이 남아 있어서 메모리 차지가 크다&lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;list의-기능&quot;&gt;List의 기능&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;✨&lt;strong&gt;처음, 끝, 중간&lt;/strong&gt;에 엘리먼트를 &lt;strong&gt;추가 / 삭제&lt;/strong&gt;하는 기능&lt;/li&gt;
  &lt;li&gt;데이터가 List에 있는지 없는지 체크하는 기능&lt;/li&gt;
  &lt;li&gt;리스트의 모든 데이터에 접근할 수 있는 기능&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&quot;언어별-비교&quot;&gt;언어별 비교&lt;/h1&gt;

&lt;ul&gt;
  &lt;li&gt;C : 리스트를 지원하지 않는다. → 직접 만들거나 라이브러리를 사용해야 함&lt;/li&gt;
  &lt;li&gt;JavaScript : 배열이 리스트&lt;/li&gt;
  &lt;li&gt;파이썬 : 리스트가 배열&lt;/li&gt;
  &lt;li&gt;JAVA : 배열과 리스트를 독립적으로 지원한다.
    &lt;ul&gt;
      &lt;li&gt;List를 두 개 지원 (LinkedList / ArrayList)&lt;/li&gt;
    &lt;/ul&gt;

    &lt;p&gt;&lt;img src=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/1335/2885.png&quot; alt=&quot;https://s3.ap-northeast-2.amazonaws.com/opentutorials-user-file/module/1335/2885.png&quot; /&gt;&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;hr /&gt;

&lt;h1 id=&quot;-컨셉이-중요하다&quot;&gt;+) 컨셉이 중요하다&lt;/h1&gt;

&lt;blockquote&gt;
  &lt;p&gt;각각의 자료구조의 중심 컨셉이 무엇인지 파악하는 것이 중요하다!🌟&lt;/p&gt;
&lt;/blockquote&gt;</content><author><name>정겨운</name><email>gyuwoonj@gmail.com</email></author><category term="자료구조" /><category term="자료구조" /><category term="List" /><category term="Array" /><summary type="html">배열과의 차이점과 List 설명</summary></entry><entry><title type="html">github.io 블로그 시작하기</title><link href="http://localhost:4000/blog/test-devinlife-post/" rel="alternate" type="text/html" title="github.io 블로그 시작하기" /><published>2020-08-26T00:00:00+09:00</published><updated>2020-08-26T22:06:00+09:00</updated><id>http://localhost:4000/blog/test-devinlife-post</id><content type="html" xml:base="http://localhost:4000/blog/test-devinlife-post/">&lt;p&gt;GitHub Blog 서비스인 github.io 블로그 시작하기로 했다.
GitHub Blog 서비스의 이름은 Pages이다.&lt;/p&gt;

&lt;p&gt;Pages가 다른 블로그 플랫폼 보다 편한 것 같아서 마음에 든다.
다른 사람들도 같이 많이 사용했으면 좋겠다는 생각이 든다.&lt;/p&gt;

&lt;p&gt;YFM에서 정의한 제목을 이중 괄호 구문으로 본문에 추가할 수 있다.
이 글의 제목은 github.io 블로그 시작하기이고
마지막으로 수정된 시간은 2020-08-26 08:06:00 -0500이다.&lt;/p&gt;</content><author><name>정겨운</name><email>gyuwoonj@gmail.com</email></author><category term="Blog" /><category term="Blog" /><summary type="html">GitHub Blog 서비스인 github.io 블로그 시작하기로 했다.</summary></entry><entry><title type="html">2020-08-25 일기</title><link href="http://localhost:4000/diary/post-Diary/" rel="alternate" type="text/html" title="2020-08-25 일기" /><published>2020-08-25T00:00:00+09:00</published><updated>2020-08-25T00:00:00+09:00</updated><id>http://localhost:4000/diary/post-Diary</id><content type="html" xml:base="http://localhost:4000/diary/post-Diary/">&lt;h2 id=&quot;블로그&quot;&gt;블로그&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;어제는 jekyll을 이용해서 테마도 정하고 깃헙 페이지로 배포까지 했다. 그래도 “개발자라면 깃허브로 블로그해야지!”라는 생각이 있었는데,, ㅎ,,, 너무 허접시려워서 민망하다.. 내가 제일 잘하는거. 일단 시작부터 하자. 나중에 예쁘게 고쳐도 돼. 일단 하자.&lt;/li&gt;
  &lt;li&gt;세부적인 설정은 다 &lt;a href=&quot;https://honbabzone.com/jekyll/start-gitHubBlog/&quot;&gt;김석진님 블로그&lt;/a&gt; 와 깃허브를 참고해서 만들었다. 진짜 여기 아니었으면 울 뻔 ,,흑흑 감사합니다. 사는동안 오래 버시고 행복하세요.&lt;/li&gt;
  &lt;li&gt;로컬로 돌려서 admin으로 새 글을 작성하는 중이다. 모든게 신기해..   재밌어. 짜릿해&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;tdd&quot;&gt;TDD&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;면접을 하루 앞두고 갑자기 무슨 마음에 바람이 들었는지 읽으려고 사두고 책상 한켠에 밀어 넣어 두었던 켄트 백의 테스트 주도 개발을 펼쳤다. 사실 유튜브에서 백기선님이 여러번 말씀도 하셨고, 학원에서도 테스트 코드 작성해서 돌려보는 것까진 배운터라 언젠가는 제대로 익혀보겠다고 다짐했건만,,, 일단은 가볍게 일독하고, 면접 끝나면 제대로 코드도 쳐가면서 익혀봐야지!&lt;/li&gt;
  &lt;li&gt;유튜브에도 혹시나 하는 마음으로 TDD를 쳐봤는데 꽤 많은 영상들이 있었다. 그 중 짤막해서 보기도 좋고 명확하게 설명도 해줘서 유익했던 TDD 관련 재생목록을 미래의 나를 위해 올려놓는다. 공부하자!&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/playlist?list=PLBlLtvR3PRpq0h6w1EqQuJsXjqgcknkaU&quot;&gt;https://www.youtube.com/playlist?list=PLBlLtvR3PRpq0h6w1EqQuJsXjqgcknkaU&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;maas&quot;&gt;MaaS&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;내일 면접 보는 곳이 MaaS를 주력으로 DB를 접목시켜서 사업을 확장해 나가는 곳이라 MaaS에 대해서 좀 더 알아봤다. 사실 SaaS나 IaaS는 그래도 익히 들어서 대략적으로나마 알고 있었는데 MaaS는 생소했다.&lt;/li&gt;
  &lt;li&gt;MaaS는 ‘Mobility as a Service’의 준말로, 직역하자면 ‘서비스로서의 모빌리티’이다. MaaS의 핵심은 ‘모든 교통수단의 통합’이라 할 수 있는데 통합된 정보를 기반으로 최적의 이동전략을 써서 알려주는 것이라고 한다. 즉, 사용자 관점에서 이동수단을 통합 제공하는 것이 MaaS의 핵심인 것!&lt;/li&gt;
  &lt;li&gt;나는 우리집과 지인에게 소소히 알려진 길치 중의 길치라 늘 집밖을 나설 때 제일 먼저 네이버 지도를 키고 목적지까지 최단 거리를 찾는다. (심지어 지하철도 가장 빠른 환승 구간을 찾는다) 그리고 이게 나만의 일상은 아닐 것이다. 나에게 있어서 개발할 때 가장 큰 동기는 “생활 속에서 만나는 불편함”인데 MaaS에 대해 살펴보니 내일 면접보는 곳에 붙는다면 열심히 불타오르면서 공부할 수 있을 것 같다.. 하..&lt;/li&gt;
&lt;/ul&gt;</content><author><name>정겨운</name><email>gyuwoonj@gmail.com</email></author><category term="Diary" /><category term="tdd" /><category term="TIL" /><summary type="html">블로그</summary></entry><entry><title type="html">사랑받는 신입 개발자 되기</title><link href="http://localhost:4000/devlog/test-post/" rel="alternate" type="text/html" title="사랑받는 신입 개발자 되기" /><published>2020-08-25T00:00:00+09:00</published><updated>2020-08-25T01:00:00+09:00</updated><id>http://localhost:4000/devlog/test-post</id><content type="html" xml:base="http://localhost:4000/devlog/test-post/">&lt;p&gt;by 드림코딩 엘리&lt;/p&gt;

&lt;p&gt;어떻게 하면 회사에서, 팀에서 필요로 하는 일들을!
어떻게 나의 가치를 우리 팀에 필요로 하는 곳에 쓸 수 있을까 고민하기&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;솔선수범, 책임감 있게, 성실하게 회사 생활하기&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;“동료들, 선배들을 도와주고, 도움 받으면 보답하기”&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;솔선수범 &lt;strong&gt;문서화&lt;/strong&gt;
    &lt;ul&gt;
      &lt;li&gt;겪고 설치하는 환경설정, 팀별 프로세스, 프로젝트 관련 문서 등을 다음 사람 또는 팀을 위해 문서화&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;회사와 제품을 이해
    &lt;ul&gt;
      &lt;li&gt;개발하는 제품을 써보고 장.단점 / 버그 정리하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;탁월함
    &lt;ul&gt;
      &lt;li&gt;유닛 테스트가 있다면 리팩토링  / 없다면 유닛 테스트 추가해보기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;엘리의-10가지-tip&quot;&gt;엘리의 10가지 tip&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;나만의 멘토찾기
    &lt;ul&gt;
      &lt;li&gt;내가 원하는 분야나 닮고 싶은 분께 “나의 사수가 되어주세요” 부탁하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;회사 / 팀에 대해 이해하기
    &lt;ul&gt;
      &lt;li&gt;어떤 일을 하는지, 어떤 회사인지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;팀이 맡고있는 프로젝트에 대해 이해하기
    &lt;ul&gt;
      &lt;li&gt;어떤 분야를 담당하는지, 어떤 프로젝트이고 왜 중요한지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;팀과 프로젝트에 관련된 문서받기
    &lt;ul&gt;
      &lt;li&gt;보통 팀, 프로젝트별 문서가 많다. 받아와서 이해하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;제품을 이해하고 직접 써보기
    &lt;ul&gt;
      &lt;li&gt;제품마다 가지고 있는 특징과 용어를 친숙하게 하기. 장/단점, 개선점도 생각해보기!&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;프로젝트의 아키텍처를 이해하기
    &lt;ul&gt;
      &lt;li&gt;이 제품이 어떻게 아키텍처화 되어서 프로젝트로 형성되었는지, 어떻게 모듈과 패키지로 나누어져 있는지, 우리팀은 어떤 모듈과 패키지를 위주로 개발하는지&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;다양한 모듈의 이슈들을 부탁해서 받아와 해결하기
    &lt;ul&gt;
      &lt;li&gt;수정하면서 코드를 직접 만져봐야 이해가 높아진다.&lt;/li&gt;
      &lt;li&gt;필요하다면 유닛 테스트를 추가한다.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;팀의 프로세스 이해하기
    &lt;ul&gt;
      &lt;li&gt;어떻게 일하고 정보를 공유하는지, 프로세스 개선방안은 뭐가 있는지 고민하기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Job Description 받기
    &lt;ul&gt;
      &lt;li&gt;‘어떤 사람을 뽑아요~’ 하는 부분을 문서화
        &lt;ul&gt;
          &lt;li&gt;나에게 예상되는 스킬이나 의무는 무엇인지 주기적으로 체크하기&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
      &lt;li&gt;내 다음 레벨의 잡 디스크립션도 받아오기
        &lt;ul&gt;
          &lt;li&gt;다음 레벨의 일들을 조금씩 한다&lt;/li&gt;
        &lt;/ul&gt;
      &lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;긍정적, 능동적, 활기찬 커뮤니케이션
    &lt;ul&gt;
      &lt;li&gt;도움을 받았다면 능동적으로 ‘감사합니다!’ 인사&lt;/li&gt;
      &lt;li&gt;말할때 &lt;strong&gt;결론&lt;/strong&gt; 먼저! 하고 후에 부가 설명 붙이기&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;</content><author><name>정겨운</name><email>gyuwoonj@gmail.com</email></author><category term="Devlog" /><category term="tip" /><summary type="html">by 드림코딩 엘리</summary></entry></feed>